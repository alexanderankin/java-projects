import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.graalvm.buildtools.gradle.dsl.NativeImageOptions
import org.graalvm.buildtools.gradle.tasks.BuildNativeImageTask

plugins {
    id 'info.ankin.projects.app-conventions'
}

version = '0.0.1'

dependencies {
    implementation platform('com.fasterxml.jackson:jackson-bom:' + property('jacksonVersion'))
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
}

// for shadowJar
application.mainClass.set 'info.ankin.projects.cli.yaml2json.Yaml2Json'

shadowJar {
    // output first jar as "shadow"
    // so as not to confuse with yaml2json and json2Yaml
    archiveBaseName.set 'shadow'
}

void customShadowJar(ShadowJar s, String name, String className) {
    s.group 'shadow'
    s.description name + 'Jar shadow jar'
    s.archiveBaseName.set name
    s.manifest {
        attributes('Main-Class': 'info.ankin.projects.cli.yaml2json.' + className)
    }
    s.from zipTree(tasks.shadowJar.getArchiveFile())
}

def yaml2JsonJar = tasks.register('yaml2JsonJar', ShadowJar) {
    customShadowJar(it, 'yaml2Json', 'Yaml2Json')
}

def json2YamlJar = tasks.register('json2YamlJar', ShadowJar) {
    customShadowJar(it, 'json2Yaml', 'Json2Yaml')
}

tasks {
    shadowJar {
        finalizedBy yaml2JsonJar, json2YamlJar
    }
}

// for graalvmNative
tasks.jar.enabled(true)

// https://graalvm.github.io/native-build-tools/0.9.13/gradle-plugin.html#configuration-options
graalvmNative {
    binaries  {
        json2yaml { NativeImageOptions o ->
            o.imageName.set 'json2yaml'
            o.mainClass.set json2YamlJar.get().getManifest().getAttributes().get('Main-Class')

            o.debug.set false
            o.verbose.set true
            o.fallback.set false
            o.buildArgs.add('-Ob') // faster development builds
            o.useFatJar.set false
            o.classpath sourceSets.main.output.files, project.tasks.shadowJar
        }

        yaml2json { NativeImageOptions o ->
            o.imageName.set 'yaml2json'
            o.mainClass.set yaml2JsonJar.get().getManifest().getAttributes().get('Main-Class')
            o.debug.set false
            o.verbose.set true
            o.fallback.set false
            o.buildArgs.add('-Ob') // faster development builds
            o.useFatJar.set false
            o.classpath sourceSets.main.output.files, project.tasks.shadowJar
        }
    }
}

def cp = tasks.register('copyNativeImages') {
    def files = ['yaml2json', 'json2yaml'].toSet()
    dependsOn tasks.withType(BuildNativeImageTask).matching { o -> o.executableName.get() in files }
    doLast {
        tasks.nativeCompile.outputs.files.singleFile.mkdirs()
        copy {
            from tasks.nativeJson2yamlCompile.outputs.files
            from tasks.nativeYaml2jsonCompile.outputs.files

            into tasks.nativeCompile.outputs.files.singleFile
        };
    }
}

tasks {
    nativeCompile {
        finalizedBy nativeYaml2jsonCompile, nativeJson2yamlCompile, cp
        enabled false
    }
}
